<?xml version="1.0"?>
	<launch>
		<!-- \param "desired_pose" refers to the desired pose to be reached, i.e., (x, y, theta) in [m, m, deg.] -->
	   	<arg name="desired_pose" default="[12.56, -42.79, 0]"/>
	   	<arg name="normal_dist" default="false" />	
	   	
		<!-- \param "dist_type" to set the distribution that will be used for generating the control noise
			# 0: Normal (Gaussian) distribution
			# 1: Normal and LogNormal (NLN) mixture -->
		<arg name="dist_type" default="0" if="$(arg normal_dist)"/>
		<arg name="dist_type" default="1" unless="$(arg normal_dist)"/>	

		 <!-- \param "std_n" to set the standard deviation of Normal distribution for both MPPI and log-MPPI -->
		<arg name="std_n" default="[0.152, 0.166]" if="$(arg normal_dist)"/> 
		<!-- For the case where the injected noise of MPPI is equal to that of log-MPPI -->
		<!--arg name="std_n" default="[0.13, 0.137]" unless="$(arg normal_dist)"/> --> 
		<!-- arg name="std_n" default="[0.045, 0.047]" unless="$(arg normal_dist)"/> -->
		<arg name="std_n" default="[0.15, 0.15]" unless="$(arg normal_dist)"/> 

		<!-- \param "lambda" is the inverse temperature which determines how selective the weighted average of the
				trajectories is -->
		<arg name="lambda" default="0.572" if="$(arg normal_dist)"/> 
		<!--arg name="lambda" default="0.169" unless="$(arg normal_dist)"/> -->
		<arg name="lambda" default="0.23" unless="$(arg normal_dist)"/> 

		<!-- \param "print_out" prints out the current state and the optimal control generated by MPPI -->
	   	<arg name="print_out" default="false" />	
		
		<!-- \param "without_heading" to navigate without taking into account the heading of the robot, as we have 360 [deg.] LiDaR -->
		<arg name="without_heading" default="false" />
		
		<!-- Launch MPPI and its parameters -->
		<node name="mppi_control" pkg="dilly" type="mppi_control_node.py" output="screen">
			<rosparam command="load" file="$(find dilly)/resources/mppi_params/mppi_params_sim.yaml" />
			<rosparam param="desired_pose" subst_value="True">$(arg desired_pose)</rosparam>
			<rosparam param="std_n" subst_value="True">$(arg std_n)</rosparam>
			<param name="lambda" type="double" value="$(arg lambda)"/>
			<param name="dist_type" type="int" value="$(arg dist_type)"/>
			
			<param name="print_out" type="bool" value="$(arg print_out)"/>	
			<param name="without_heading" type="bool" value="$(arg without_heading)" />

			<param name="results_folder" value="$(find dilly)/results/sim_results"/>	
			<!--remap from="odom" to="ground_truth/odom" /> -->            <!-- Should be used in the case of intensive simulation         -->
			<!-- <remap from="odom" to="odometry/filtered" /> -->   <!-- Should be used in the real-world test with Wheels Odometry -->
			<!--<remap from="odom" to="aft_mapped_to_init" /> -->   <!-- Should be used in the real-world test with Velodyne "LOAM" -->
			<remap from="odom" to="/odom" /> 
			<remap from="goal" to="move_base_simple/goal" /> 
			<remap from="local_costmap" to="move_base/local_costmap/costmap" />
			<!-- <remap from="scan" to="front/scan"/>  -->
		</node>
	        
	</launch>


